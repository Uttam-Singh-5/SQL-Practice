use w3schoolpractice;
/* 1. From the following tables, write a SQL query to find all the orders issued by the 
salesman 'Paul Adam'. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
*/
select * from orders 
where salesman_id = (select salesman_id from salesman where name = 'Paul Adam');

/*
2. From the following tables write a SQL query to find all orders generated by London-based 
salespeople. Return ord_no, purch_amt, ord_date, customer_id, salesman_id.
*/
select * from orders 
where salesman_id IN (select salesman_id from salesman where city = 'London');

/*
3. From the following tables write a SQL query to find all orders generated by the 
salespeople who may work for customers whose id is 3007. 
Return ord_no, purch_amt, ord_date, customer_id, salesman_id.
*/
select * from orders 
where salesman_id in (select salesman_id from salesman where customer_id = 3007 );

/*
4. From the following tables write a SQL query to find the order values greater than the 
average order value of 10th October 2012. Return ord_no, purch_amt, ord_date, customer_id, 
salesman_id.
*/
select * from orders 
where purch_amt > (select avg(purch_amt) from orders where ord_date = '2012-10-10');

/*
5. From the following tables, write a SQL query to find all the orders generated in 
New York city. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
*/
select * from orders 
where salesman_id in (select salesman_id from salesman where city = 'New York');

/*
6. From the following tables write a SQL query to determine the commission of the salespeople 
in Paris. Return commission.
*/
select commission from salesman 
where salesman_id in (select salesman_id from customers where city = 'Paris');

/*
7. Write a query to display all the customers whose ID is 2001 below the salesperson 
ID of Mc Lyon.
*/
select * from customers 
where customer_id in (select salesman_id - 2001 from salesman where name = 'Mc Lyon');

/*
8. From the following tables write a SQL query to count the number of customers with 
grades above the average in New York City. Return grade and count. 
*/
select grade , count(customer_id) no_of_customers from customers
group by grade having grade > (select avg(grade) from customers where city = 'New York');

/*
9. From the following tables, write a SQL query to find those salespeople who earned 
the maximum commission. Return ord_no, purch_amt, ord_date, and salesman_id.
*/
select * from orders 
where salesman_id in 
(select salesman_id from salesman where commission 
= (select max(commission) from salesman));

/*
10. From the following tables write SQL query to find the customers who placed orders on 
17th August 2012. Return ord_no, purch_amt, ord_date, customer_id, salesman_id and cust_name.
*/
select 
order_new.ord_no, order_new.purch_amt, order_new.ord_date, c.customer_id, c.salesman_id, 
cust_name from customers c
join (select o.customer_id, ord_no, purch_amt, ord_date from orders o where
 ord_date = '2012-08-17') as order_new on c.customer_id = order_new.customer_id;

/*
11. From the following tables write a SQL query to find salespeople who had more than one 
customer. Return salesman_id and name.
*/
select s.salesman_id, s.name from salesman s 
join (select salesman_id, count(customer_id) from customers 
group by salesman_id having count(customer_id) > 1) as customer_new 
on s.salesman_id = customer_new.salesman_id;
SELECT salesman_id,name 
FROM salesman a 
WHERE 1 < 
    (SELECT COUNT(*) 
     FROM customers 
     WHERE salesman_id=a.salesman_id);

/*
12. From the following tables write a SQL query to find those orders, which are 
higher than the average amount of the SAME orders. Return ord_no, purch_amt, ord_date, 
customer_id and salesman_id.
It aims to find orders that have a purchase amount (purch_amt) greater than the 
average purchase amount of orders made by the same customer
*/
select * from orders a 
where purch_amt > (select avg(purch_amt) from orders b where a.customer_id = b.customer_id);

/*
13. From the following tables write a SQL query to find those orders that are equal or higher 
than the average amount of the orders. Return ord_no, purch_amt, ord_date, customer_id and 
salesman_id.
*/
select * from orders o where purch_amt >= 
(select avg(purch_amt) from orders r where o.customer_id = r.customer_id);

/*
14. Write a query to find the sums of the amounts from the orders table, grouped by date, 
and eliminate all dates where the sum was not at least 1000.00 above the maximum order 
amount for that date.
*/
SELECT ord_date, SUM(purch_amt) AS total_amount
FROM orders
GROUP BY ord_date
HAVING total_amount - 1000 >= (
    SELECT MAX(purch_amt)
    FROM orders sub
    WHERE sub.ord_date = orders.ord_date
);
SELECT ord_date, SUM (purch_amt)
FROM orders a
GROUP BY ord_date
HAVING SUM (purch_amt) >
    (SELECT 1000.00 + MAX(purch_amt) 
     FROM orders b 
     WHERE a.ord_date = b.ord_date);

/*
15. Write a query to extract all data from the customer table if and only if one or more 
of the customers in the customer table are located in London.
*/
select * from customers where exists (select customer_id from customers where city = 'London');

/*
16. From the following tables write a SQL query to find salespeople who deal with multiple 
customers. Return salesman_id, name, city and commission.
*/
select * from salesman where salesman_id in
(select distinct salesman_id from customers c where exists
(select * from customers cu 
where c.salesman_id = cu.salesman_id and c.cust_name != cu.cust_name));
-- With joins
SELECT distinct s.salesman_id, s.name, s.city, s.commission
FROM salesman s
JOIN customers a ON s.salesman_id = a.salesman_id
JOIN customers b ON s.salesman_id = b.salesman_id AND a.customer_id <> b.customer_id;

/*
17. From the following tables write a SQL query to find salespeople who deal with a 
single customer. Return salesman_id, name, city and commission.
*/
select * from salesman where salesman_id in (select salesman_id from customers a 
where not exists (select * from customers b 
where a.salesman_id = b.salesman_id and a.customer_id != b.customer_id));

/*
18. From the following tables, write a SQL query to find the salespeople who deal 
the customers with more than one order. Return salesman_id, name, city and commission.
*/                                                                      
SELECT * 
FROM salesman a 
WHERE EXISTS     
   (SELECT * FROM customers b     
    WHERE a.salesman_id=b.salesman_id     
	 AND 1<             
	     (SELECT COUNT(*)              
		  FROM orders             
		  WHERE orders.customer_id =            
		  b.customer_id));

/*
19. From the following tables write a SQL query to find the salespeople who deal with 
those customers who live in the same city. Return salesman_id, name, city and commission.
*/
select * from salesman where city = any (select city from customers);

/*
20. From the following tables write a SQL query to find salespeople whose place of residence 
matches any city where customers live. Return salesman_id, name, city and commission.
*/
select * from salesman where salesman.city in (select customers.city from customers);

/*
21. From the following tables write a SQL query to find all those salespeople whose names 
appear alphabetically lower than the customerâ€™s name. Return salesman_id, name, city, 
commission.
*/
SELECT * FROM SALESMAN S WHERE EXISTS(SELECT * FROM CUSTOMERS C WHERE S.CITY < C.CUST_NAME);

/*
22. From the following table write a SQL query to find all those customers with a higher 
grade than all the customers alphabetically below the city of New York. Return customer_id, 
cust_name, city, grade, salesman_id.
*/
SELECT * FROM CUSTOMERS A WHERE grade > any (SELECT grade FROM CUSTOMERS B 
WHERE CITY < 'New York')

/*
23. From the following table write a SQL query to find all those orders whose order amount 
exceeds at least one of the orders placed on September 10th 2012. Return ord_no, purch_amt, 
ord_date, customer_id and salesman_id.
*/


/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/

/*

*/



